// 201807047_김성운_텀프로젝트.cpp : 애플리케이션에 대한 진입점을 정의합니다.
//

#include "framework.h"
#include "201807047_김성운_텀프로젝트.h"

#include <time.h>   //난이도 조절

#define MAX_LOADSTRING 100

// 전역 변수:
HINSTANCE hInst;                                // 현재 인스턴스입니다.
WCHAR szTitle[MAX_LOADSTRING];                  // 제목 표시줄 텍스트입니다.
WCHAR szWindowClass[MAX_LOADSTRING];            // 기본 창 클래스 이름입니다.

// 이 코드 모듈에 포함된 함수의 선언을 전달합니다:
ATOM                MyRegisterClass(HINSTANCE hInstance);
BOOL                InitInstance(HINSTANCE, int);
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);

int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
                     _In_opt_ HINSTANCE hPrevInstance,
                     _In_ LPWSTR    lpCmdLine,
                     _In_ int       nCmdShow)
{
    UNREFERENCED_PARAMETER(hPrevInstance);
    UNREFERENCED_PARAMETER(lpCmdLine);

    // TODO: 여기에 코드를 입력합니다.

    // 전역 문자열을 초기화합니다.
    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
    LoadStringW(hInstance, IDC_MY201807047, szWindowClass, MAX_LOADSTRING);
    MyRegisterClass(hInstance);

    // 애플리케이션 초기화를 수행합니다:
    if (!InitInstance (hInstance, nCmdShow))
    {
        return FALSE;
    }

    HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_MY201807047));

    MSG msg;

    // 기본 메시지 루프입니다:
    while (GetMessage(&msg, nullptr, 0, 0))
    {
        if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
        {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
    }

    return (int) msg.wParam;
}



//
//  함수: MyRegisterClass()
//
//  용도: 창 클래스를 등록합니다.
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
    WNDCLASSEXW wcex;

    wcex.cbSize = sizeof(WNDCLASSEX);

    wcex.style          = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc    = WndProc;
    wcex.cbClsExtra     = 0;
    wcex.cbWndExtra     = 0;
    wcex.hInstance      = hInstance;
    wcex.hIcon          = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_MY201807047));
    wcex.hCursor        = LoadCursor(nullptr, IDC_ARROW);
    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+1);
    wcex.lpszMenuName   = MAKEINTRESOURCEW(IDC_MY201807047);
    wcex.lpszClassName  = szWindowClass;
    wcex.hIconSm        = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

    return RegisterClassExW(&wcex);
}

//
//   함수: InitInstance(HINSTANCE, int)
//
//   용도: 인스턴스 핸들을 저장하고 주 창을 만듭니다.
//
//   주석:
//
//        이 함수를 통해 인스턴스 핸들을 전역 변수에 저장하고
//        주 프로그램 창을 만든 다음 표시합니다.
//

BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
   hInst = hInstance; // 인스턴스 핸들을 전역 변수에 저장합니다.

   HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
      CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, nullptr, nullptr, hInstance, nullptr);

   if (!hWnd)
   {
      return FALSE;
   }

   ShowWindow(hWnd, nCmdShow);
   UpdateWindow(hWnd);

   return TRUE;
}

//
//  함수: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  용도: 주 창의 메시지를 처리합니다.
//
//  WM_COMMAND  - 애플리케이션 메뉴를 처리합니다.
//  WM_PAINT    - 주 창을 그립니다.
//  WM_DESTROY  - 종료 메시지를 게시하고 반환합니다.
//
//

RECT g_me, g_you, g_earth;   // 나와 장애물,땅바닥의 좌표 보관할 구조체
RECT dst;   //겹침 영역 확인용 
int score;  // 점수를 기록할 변수
int g_level;    //난이도 조절을 위한 변수
int jump, down;   // 점프모션을 위한 변수들

#define TIMER_ID_1  1   // 장애물의 움직임을 위한 주기적인 호출 ID
#define TIMER_ID_2  2   // 점프와 점프 후 내려오는 움직임을 위한 호출 ID

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    switch (message)
    {
    case WM_COMMAND:
        {
            int wmId = LOWORD(wParam);
            // 메뉴 선택을 구문 분석합니다:
            switch (wmId)
            {
            case IDM_ABOUT:
                DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
                break;
            case IDM_EXIT:
                DestroyWindow(hWnd);
                break;
            default:
                return DefWindowProc(hWnd, message, wParam, lParam);
            }
        }
        break;

    //자신과 장애물, 땅바닥, 타이머 생성
    case WM_CREATE:
    {
        //나의 좌표
        g_me.left = 50;
        g_me.top = 500;
        g_me.right = g_me.left + 100;
        g_me.bottom = g_me.top + 100;

        //장애물 좌표
        g_you.left = 1000;
        g_you.top = 520;
        g_you.right = g_you.left + 10;
        g_you.bottom = g_you.top + 80;

        //땅바닥 좌표
        g_earth.left = 0;
        g_earth.top = 600;
        g_earth.right = g_earth.left + 2000;
        g_earth.bottom = g_earth.top + 10;

        // g_level 타이머 설정
        g_level = 1000; //타이머를 설정. 1초마다 주기적으로 호출
        //타이머 설정
        SetTimer(hWnd, TIMER_ID_1, g_level, NULL);  // 장애물 타이머
        SetTimer(hWnd, TIMER_ID_2, 40, NULL);      // 점프 타이머, 0.04초로 설정
        break;
    }

    //점프키
    case WM_KEYDOWN:
    {
        switch (wParam)
        {
        case VK_UP:     // UP키를 누를시 점프

            if (g_me.bottom == 600) {  // 현재 상태가 바닥(좌표: g_me.bottom == 600)일 때만 점프
               
                jump = true;    // 점프키를 누를 시 jump = true 해준다
            }
        }
        // 화면 무효화
        InvalidateRect(hWnd, NULL, TRUE);
    }break;

    case WM_TIMER:  // 움직임을 위한 코드
    {
        // 자신을 움직이게 하는 코드
        if (TIMER_ID_2 == wParam) {     // 점프 타이머  코드

            if (jump == true)      // jump가 true일 때 점프를 하게 해준다 
            {
                g_me.top -= 10;
                g_me.bottom -= 10;

                if (g_me.bottom == 470) {   // g_me.bottom의 좌표가 470일 때 
                                            // jump를 false, down을 true로 바꿔준다
                    jump = false;
                    down = true;
                }
            }
            else if (down == true)  // down이 true일 때 내려오게 해준다 
            {
                g_me.top += 10;
                g_me.bottom += 10;

                if (g_me.bottom == 600) {   // g_me.bottom의 좌표가 600일 때 down을 false로 바꿔준다
                                             
                    down = false;
                }
            }
            
            // 화면 무효화
            InvalidateRect(hWnd, NULL, TRUE);
        }

         //장애물을 움직이게 하는 코드
        if (g_you.right > 0) {          
            g_you.left -= 10;
            g_you.right -= 10;
        }
        //장애물 새로 생성 코드
        else if (g_you.left < 0) {    //right로 사용 시 장애물이 새로 생성이 안된다.  
            g_you.left = 1000;
            g_you.right = g_you.left + 10;
            score += 10;    // 점수 기록 코드
        } 
            // 화면 무효화
            InvalidateRect(hWnd, NULL, TRUE);

         // 난이도 조절
        if (50 != g_level)    // 50이 될 때까지 빼준다
        {
            g_level -= 50;     // 1초당 0.05초씩 줄어든다.
            KillTimer(hWnd, TIMER_ID_1);                    // 1번을 정지
            SetTimer(hWnd, TIMER_ID_1, g_level, NULL);      // 1번으로 새로운 타이머 생성
        }
        // 화면 무효화
        InvalidateRect(hWnd, NULL, TRUE);

        // 게임종료 코드
        if (TRUE == IntersectRect(&dst, &g_me, &g_you)) {    // 겹침 영역이 있다
             // 주기적인 호출을 중단
            KillTimer(hWnd, TIMER_ID_1);    // TIMER_ID_1,2 중 하나라도 종료 안 할 시 
            KillTimer(hWnd, TIMER_ID_2);    // 종료 메시지가 계속 나오는 에러가 생긴다
            // 부모 윈도우에 종속적인 윈도우
            MessageBox(hWnd, L"게임종료", L"종료 메시지", MB_OK);
            // WndProc 함수를 종료
            return 0;
        }
    }break;

    case WM_PAINT:
        {

        WCHAR string[64] = { 0 };
        PAINTSTRUCT ps;
        HDC hdc = BeginPaint(hWnd, &ps);

        //점수 표시 코드
        wsprintfW(string, L"점수: %d", score);
        TextOut(hdc, 500, 20, string, lstrlenW(string));

        Ellipse(hdc, g_me.left, g_me.top, g_me.right, g_me.bottom);         //자신(원모양) 표시
        Rectangle(hdc, g_you.left, g_you.top, g_you.right, g_you.bottom);   //장애물(사각형) 표시
        Rectangle(hdc, g_earth.left, g_earth.top, g_earth.right, g_earth.bottom);   //바닥 표시

        EndPaint(hWnd, &ps);
        }
        break;
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}

// 정보 대화 상자의 메시지 처리기입니다.
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
    UNREFERENCED_PARAMETER(lParam);
    switch (message)
    {
    case WM_INITDIALOG:
        return (INT_PTR)TRUE;

    case WM_COMMAND:
        if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
        {
            EndDialog(hDlg, LOWORD(wParam));
            return (INT_PTR)TRUE;
        }
        break;
    }
    return (INT_PTR)FALSE;
}
